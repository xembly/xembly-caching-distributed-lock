name: build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Build with dotnet
        run: dotnet build -c Release

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Test with dotnet
        run: dotnet test -c Release /p:CollectCoverage=true /p:Threshold=80 /p:ThresholdType=line /p:CoverletOutputFormat=opencover
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./Xembly.Caching.Distributed.Lock.Tests/coverage.opencover.xml
          flags: unittests
          fail_ci_if_error: true

  publish:
    if: (startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/master') && !contains(github.event.head_commit.message, '#nopublish')
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        uses: QwerMike/xpath-action@v1
        with:
          filename: ./Xembly.Caching.Distributed.Lock/Xembly.Caching.Distributed.Lock.csproj
          expression: //PackageVersion[1]/text()[1]
      - name: Tag Release
        env:
          VERSION: ${{ steps.get_version.outputs.result }}
        run: |
          git tag $VERSION
          git push origin $VERSION
      - name: Pack NuGet Packages
        run: dotnet pack -c Release
      - name: Publish NuGet Packages
        run: dotnet nuget push ./**/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
